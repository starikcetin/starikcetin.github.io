@mixin unimportant() {
    :where(&) {
        @content;
    }
}

@mixin plain-anchor {
    a {
        cursor: pointer;

        &:link {
            color: var(--color-plain-link-unvisited);
        }

        &:visited {
            color: var(--color-plain-link-visited);
        }

        &:hover {
            color: var(--color-plain-link-hover);
        }

        &:active {
            color: var(--color-plain-link-active);
        }
    }
}

@mixin imitate-anchor {
    cursor: pointer;
    color: var(--color-link-unvisited);

    &:hover {
        color: var(--color-link-hover);
    }

    &:active {
        color: var(--color-link-active);
    }
}

@mixin imitate-plain-anchor {
    cursor: pointer;
    color: var(--color-plain-link-unvisited);

    &:hover {
        color: var(--color-plain-link-hover);
    }

    &:active {
        color: var(--color-plain-link-active);
    }
}

@mixin flex($direction, $row-gap: 0, $column-gap: 0, $inline: false) {
    @if $inline {
        display: inline-flex;
    }

    @else {
        display: flex;
    }

    flex-direction: $direction;
    row-gap: $row-gap;
    column-gap: $column-gap;
}

@mixin wrapper($content-width: pixels-content(800), $top-padding: 1.5rem, $bottom-padding: 1.5rem, $horizontal-padding: 1.5rem) {
    $horizontal-padding: ensure-unit-if-zero($horizontal-padding);

    box-sizing: border-box;
    max-width: $content-width + (2 * $horizontal-padding);
    width: 100%;
    padding: $top-padding $horizontal-padding $bottom-padding $horizontal-padding;
    margin-left: auto;
    margin-right: auto;
}

@mixin horizontal-list($seperator-width, $child-selector: "> *", $inline: false, $skip: 0) {
    padding: 0;
    margin-left: 0;
    margin-right: 0;

    @if $inline {
        display: inline;
    } @else {
        display: block;
    }

    #{$child-selector} {
        display: inline;

        &#{selector-skip($skip + 1)}:before {
            content: "\0020\2022\0020";
            color: var(--color-seperator-hard);
            word-spacing: math.div($seperator-width, 4);
            white-space: nowrap;
        }

        &#{selector-first($skip)}:after {
            content: "\0020";
            word-spacing: math.div($seperator-width, 2);
        }

        > * {
            @include unimportant {
                display: inline;
            }
        }
    }
}

@mixin block-style {
    margin: 1rem 0;
    border: pixels-content(1) solid var(--color-seperator-soft);

    &:first-child {
        margin-top: 0;
    }

    &:last-child {
        margin-bottom: 0;
    }
}

@mixin media-smaller-than($breakpoint) {
    @media(max-width: ($breakpoint - pixels-media(1))) {
        @content;
    }
}

@mixin media-larger-than($breakpoint) {
    @media(min-width: $breakpoint) {
        @content;
    }
}

@mixin if-dark-theme($resolve-auto, $selector: "&") {
    @at-root html[data-theme="dark"] {
        #{$selector} {
            @content;
        }
    }

    @if $resolve-auto {
        @media (prefers-color-scheme: dark) {
            @at-root html[data-theme="auto"] {
                #{$selector} {
                    @content;
                }
            }
        }
    }
}

@mixin if-light-theme($resolve-auto, $selector: "&") {
    @at-root html[data-theme="light"] {
        #{$selector} {
            @content;
        }
    }

    @if $resolve-auto {
        @media (prefers-color-scheme: light) {
            @at-root html[data-theme="auto"] {
                #{$selector} {
                    @content;
                }
            }
        }
    }
}

@mixin if-auto-theme($selector: "&") {
    @at-root html[data-theme="auto"] {
        #{$selector} {
            @content;
        }
    }
}

@mixin support-fallback($key, $value, $fallbackValue: null) {
    @supports (#{$key}: #{$value}) {
        #{$key}: #{$value};
    }

    @supports not (#{$key}: #{$value}) {
        #{$key}: #{$fallbackValue};
        @content;
    }
}
