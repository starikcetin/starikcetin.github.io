-
    const paginationTitlePart = _.isNullish(pagination?.pageNumber) || pagination.pageNumber <= 0 ? '' : ` | ${_.ordinal(pagination.pageNumber + 1)} Page`;
    const originalTitle = title;
    const paginatedTitle = `${originalTitle}${paginationTitlePart}`;
    const finalTitle = (omitPageNumberInTtile ?? false) ? originalTitle : paginatedTitle;

    const config = {
        isArticle,
        originalTitle,
        paginatedTitle,
        finalTitle,
        siteName: siteConfig.title,
        description: description ?? siteConfig.description,
        url: _.absoluteUrl(page.url),
        author: author ?? siteConfig.author.name,
        generator: eleventy.generator,
        publishedDate: _.dayjs.fromDates.published(dates)?.toISO8601(),
        modifiedDate: _.dayjs.fromDates.modified(dates)?.toISO8601(),
        locale: "en_US",
        twitterCardContent: "summary",
        ogType: isArticle ? "article" : "website",
        schemaType: isArticle ? "BlogPosting" : "WebPage",
        prevUrl: _.hasValue(pagination?.href?.previous) ? _.absoluteUrl(pagination.href.previous) : undefined,
        nextUrl: _.hasValue(pagination?.href?.next) ? _.absoluteUrl(pagination.href.next) : undefined,
    };

    let structuredDataObj = {
        "@context": "https://schema.org",
        "@type": config.schemaType,
        "author": {
            "@type": "Person",
            "name": config.author,
        },
        "description": config.description,
        "headline": config.originalTitle,
        "url": config.url,
    }

    if(config.isArticle) {
        structuredDataObj = {
            ...structuredDataObj,
            "mainEntityOfPage": {
                "@type": "WebPage",
                "@id": config.url,
            },
        };
    }

    if(_.hasValue(config.modifiedDate)) {
        structuredDataObj = {
            ...structuredDataObj,
            "dateModified": config.modifiedDate,
        };
    }

    if(_.hasValue(config.publishedDate)) {
        structuredDataObj = {
            ...structuredDataObj,
            "datePublished": config.publishedDate,
        };
    }

    const structuredDataStr = JSON.stringify(structuredDataObj);

title #{config.finalTitle} | #{config.siteName}
link(rel="canonical", href=config.url)

meta(name="description", content=config.description)
meta(name="author", content=config.author)
meta(name="generator", content=config.generator)

meta(property="og:title", content=config.originalTitle)
meta(property="og:type", content=config.ogType)
meta(property="og:url", content=config.url)
meta(property="og:description", content=config.description)
meta(property="og:locale", content=config.locale)
meta(property="og:site_name", content=config.siteName)

meta(property="twitter:title", content=config.originalTitle)
meta(name="twitter:card", content=config.twitterCardContent)

script(type="application/ld+json")!= structuredDataStr

if config.isArticle
    meta(property="article:author", content=config.author)

if _.hasValue(config.modifiedDate)
    meta(property="article:modified_time", content=config.modifiedDate)

if _.hasValue(config.publishedDate)
    meta(property="article:published_time", content=config.publishedDate)

if _.hasValue(config.prevUrl)
    link(rel="prev", href=config.prevUrl)

if _.hasValue(config.nextUrl)
    link(rel="next", href=config.nextUrl)
